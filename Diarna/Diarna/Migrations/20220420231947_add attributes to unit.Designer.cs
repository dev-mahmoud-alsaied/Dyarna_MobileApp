// <auto-generated />
using System;
using Diarna.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Diarna.Migrations
{
    [DbContext(typeof(DiarnaContext))]
    [Migration("20220420231947_add attributes to unit")]
    partial class addattributestounit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Diarna.Data.Domain.TblAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ScreenName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("screenName");

                    b.HasKey("Id");

                    b.ToTable("tbl_authorization");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AwayFromPeach")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Elvatoer")
                        .HasColumnType("bit");

                    b.Property<bool>("FreeParking")
                        .HasColumnType("bit");

                    b.Property<bool>("FreeWifi")
                        .HasColumnType("bit");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrivateTransport")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceptionDesk")
                        .HasColumnType("bit");

                    b.Property<bool>("SpecialGarden")
                        .HasColumnType("bit");

                    b.Property<int?>("VillageId")
                        .HasColumnType("int")
                        .HasColumnName("village_id");

                    b.HasKey("Id");

                    b.HasIndex("VillageId");

                    b.HasIndex(new[] { "Name" }, "uniqueNameForBuilding")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("tbl_building");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblBuildingImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TblBuildingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TblBuildingId");

                    b.ToTable("TblBuildingImages");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblContractingExpnse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("tender_id");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TenderId");

                    b.ToTable("tbl_contractingExpnses");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblContractingImport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("quantity");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("tender_id");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TenderId");

                    b.ToTable("tbl_contractingImports");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblGovernorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TblGovernorates");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("GeneralExpenses")
                        .HasColumnType("bit")
                        .HasColumnName("generalExpenses");

                    b.Property<int?>("ItemtypeId")
                        .HasColumnType("int")
                        .HasColumnName("itemtype_id");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ItemtypeId");

                    b.ToTable("tbl_item");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tbl_itemType");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblMonthlyFiltring", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("value");

                    b.HasKey("UnitId", "Date");

                    b.ToTable("tbl_monthlyFiltring");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblRentExpense", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<decimal?>("ItemValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("itemValue");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("SharesId")
                        .HasColumnType("int")
                        .HasColumnName("Shares_id");

                    b.HasKey("ItemId", "Date", "UnitId");

                    b.HasIndex("SharesId");

                    b.HasIndex("UnitId");

                    b.ToTable("tbl_rentExpenses");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblRentUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mobile")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Mobile" }, "uniqueMobile")
                        .IsUnique()
                        .HasFilter("[mobile] IS NOT NULL");

                    b.ToTable("tbl_rentUsers");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblRentedUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("DeliveryPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("deliveryPrice");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<DateTime?>("RentEndDate")
                        .HasColumnType("date")
                        .HasColumnName("rentEndDate");

                    b.Property<DateTime?>("RentStartDate")
                        .HasColumnType("date")
                        .HasColumnName("rentStartDate");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("tbl_rentedUnits");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblReservation", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<int>("DateId")
                        .HasColumnType("int")
                        .HasColumnName("date_id");

                    b.Property<byte?>("ConfirmReservation")
                        .HasColumnType("tinyint")
                        .HasColumnName("confirmReservation");

                    b.Property<decimal?>("DepositValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("depositValue");

                    b.Property<decimal?>("InsuranceValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("insuranceValue");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int?>("RentUserId")
                        .HasColumnType("int")
                        .HasColumnName("rentUser_id");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("totalValue");

                    b.HasKey("UnitId", "DateId");

                    b.HasIndex("DateId");

                    b.HasIndex("RentUserId");

                    b.ToTable("tbl_reservation");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblReservationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("tbl_reservationDate");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AdditionProfit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("additionProfit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<double?>("ManagePercent")
                        .HasColumnType("float")
                        .HasColumnName("managePercent");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<double?>("Percent")
                        .HasColumnType("float")
                        .HasColumnName("percent");

                    b.Property<byte?>("ShareType")
                        .HasColumnType("tinyint")
                        .HasColumnName("shareType");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<decimal?>("UserCash")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("userCash");

                    b.Property<decimal?>("UserMinProfit")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("userMinProfit");

                    b.Property<int?>("UserSharesId")
                        .HasColumnType("int")
                        .HasColumnName("userShares_id");

                    b.HasKey("Id");

                    b.HasIndex("UserSharesId");

                    b.HasIndex(new[] { "Name" }, "UniqueSharesName")
                        .IsUnique();

                    b.ToTable("tbl_shares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblSystemUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mobile")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("mobile");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("password");

                    b.Property<bool?>("SuperAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("superAdmin");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("userName");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Mobile" }, "uniqueSysUserMobile")
                        .IsUnique()
                        .HasFilter("[mobile] IS NOT NULL");

                    b.ToTable("tbl_systemUsers");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblSystemUserAuthorization", b =>
                {
                    b.Property<int>("SysUserId")
                        .HasColumnType("int")
                        .HasColumnName("sysUser_id");

                    b.Property<int>("AuthId")
                        .HasColumnType("int")
                        .HasColumnName("auth_id");

                    b.HasKey("SysUserId", "AuthId");

                    b.HasIndex("AuthId");

                    b.ToTable("tbl_systemUser_authorization");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblTender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("name");

                    b.Property<decimal?>("TatalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("tatalPrice");

                    b.HasKey("Id");

                    b.ToTable("tbl_tenders");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblTenderShare", b =>
                {
                    b.Property<int>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("tender_id");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.Property<int>("SharesId")
                        .HasColumnType("int")
                        .HasColumnName("shares_id");

                    b.Property<int?>("SharePercentage")
                        .HasColumnType("int")
                        .HasColumnName("sharePercentage");

                    b.HasKey("TenderId", "Year", "SharesId")
                        .HasName("PK_tbl_tender_userShares");

                    b.HasIndex("SharesId");

                    b.ToTable("tbl_tender_Shares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AirCondition")
                        .HasColumnType("bit");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Balcon")
                        .HasColumnType("bit");

                    b.Property<bool>("BeinSport")
                        .HasColumnType("bit");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int")
                        .HasColumnName("building_id");

                    b.Property<bool>("CanTakePet")
                        .HasColumnType("bit");

                    b.Property<bool>("Catel")
                        .HasColumnType("bit");

                    b.Property<bool>("CentralHeating")
                        .HasColumnType("bit");

                    b.Property<bool>("Freidge")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit")
                        .HasColumnName("isValid");

                    b.Property<bool>("Kitchen")
                        .HasColumnType("bit");

                    b.Property<bool>("LookUpTheSea")
                        .HasColumnType("bit");

                    b.Property<bool>("Microwave")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinDepositValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("minDepositValue");

                    b.Property<decimal?>("MinInsuranceValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("minInsuranceValue");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPerson")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfbathroom")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("remarks");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<bool?>("SystemOwned")
                        .HasColumnType("bit")
                        .HasColumnName("systemOwned");

                    b.Property<bool>("TV")
                        .HasColumnType("bit");

                    b.Property<bool>("WashingMachine")
                        .HasColumnType("bit");

                    b.Property<bool>("WiFi")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex(new[] { "Name" }, "uniqueNameForUnits")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("tbl_units");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUnitsShare", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.Property<int>("SharesId")
                        .HasColumnType("int")
                        .HasColumnName("shares_id");

                    b.HasKey("UnitId", "Year", "SharesId")
                        .HasName("PK_tbl_userShares_units");

                    b.HasIndex("SharesId");

                    b.ToTable("tbl_units_Shares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUserShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthId")
                        .HasColumnType("int")
                        .HasColumnName("auth_id");

                    b.Property<string>("Mobile")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("AuthId");

                    b.ToTable("tbl_userShares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblVillage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<bool>("AquaPark")
                        .HasColumnType("bit");

                    b.Property<bool>("Billared")
                        .HasColumnType("bit");

                    b.Property<bool>("Cafe")
                        .HasColumnType("bit");

                    b.Property<bool>("Cinma")
                        .HasColumnType("bit");

                    b.Property<bool>("Delivery")
                        .HasColumnType("bit");

                    b.Property<bool>("EntertainmentPlaces")
                        .HasColumnType("bit");

                    b.Property<bool>("FishingPlaces")
                        .HasColumnType("bit");

                    b.Property<bool>("Guarding")
                        .HasColumnType("bit");

                    b.Property<bool>("Gym")
                        .HasColumnType("bit");

                    b.Property<bool>("Hotal")
                        .HasColumnType("bit");

                    b.Property<bool>("KidsArea")
                        .HasColumnType("bit");

                    b.Property<bool>("Mall")
                        .HasColumnType("bit");

                    b.Property<bool>("MedicalCenter")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<bool>("OpeningTheater")
                        .HasColumnType("bit");

                    b.Property<bool>("PLaygrounds")
                        .HasColumnType("bit");

                    b.Property<bool>("Parties")
                        .HasColumnType("bit");

                    b.Property<bool>("Pharmacy")
                        .HasColumnType("bit");

                    b.Property<bool>("PoliceStation")
                        .HasColumnType("bit");

                    b.Property<bool>("Resturant")
                        .HasColumnType("bit");

                    b.Property<bool>("SepcialPeach")
                        .HasColumnType("bit");

                    b.Property<bool>("Sowna")
                        .HasColumnType("bit");

                    b.Property<bool>("SwimingPool")
                        .HasColumnType("bit");

                    b.Property<bool>("TouristWalk")
                        .HasColumnType("bit");

                    b.Property<bool>("WaterGaming")
                        .HasColumnType("bit");

                    b.Property<bool>("WheelHire")
                        .HasColumnType("bit");

                    b.Property<bool>("WomanSwimingPool")
                        .HasColumnType("bit");

                    b.Property<int?>("tblGovernorateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("tblGovernorateId");

                    b.HasIndex(new[] { "Name" }, "uniqueNameForVillage")
                        .IsUnique()
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("tbl_village");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblVillageImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillageId")
                        .HasColumnType("int");

                    b.Property<int?>("tblVillageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("tblVillageId");

                    b.ToTable("TblVillageImages");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblBuilding", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblVillage", "Village")
                        .WithMany("TblBuildings")
                        .HasForeignKey("VillageId")
                        .HasConstraintName("FK_tbl_building_tbl_village1");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblBuildingImages", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblBuilding", "TblBuilding")
                        .WithMany()
                        .HasForeignKey("TblBuildingId");

                    b.Navigation("TblBuilding");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblContractingExpnse", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblItem", "Item")
                        .WithMany("TblContractingExpnses")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_tbl_contractingExpnses_tbl_item1");

                    b.HasOne("Diarna.Data.Domain.TblTender", "Tender")
                        .WithMany("TblContractingExpnses")
                        .HasForeignKey("TenderId")
                        .HasConstraintName("FK_tbl_contractingExpnses_tbl_tenders1");

                    b.Navigation("Item");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblContractingImport", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblItem", "Item")
                        .WithMany("TblContractingImports")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_tbl_contractingImports_tbl_item1");

                    b.HasOne("Diarna.Data.Domain.TblTender", "Tender")
                        .WithMany("TblContractingImports")
                        .HasForeignKey("TenderId")
                        .HasConstraintName("FK_tbl_contractingImports_tbl_tenders1");

                    b.Navigation("Item");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblItem", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblItemType", "Itemtype")
                        .WithMany("TblItems")
                        .HasForeignKey("ItemtypeId")
                        .HasConstraintName("FK_tbl_item_tbl_itemType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Itemtype");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblMonthlyFiltring", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblUnit", "Unit")
                        .WithMany("TblMonthlyFiltrings")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_tbl_monthlyFiltring_tbl_units1")
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblRentExpense", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblItem", "Item")
                        .WithMany("TblRentExpenses")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_tbl_rentExpenses_tbl_item1")
                        .IsRequired();

                    b.HasOne("Diarna.Data.Domain.TblShare", "Shares")
                        .WithMany("TblRentExpenses")
                        .HasForeignKey("SharesId")
                        .HasConstraintName("FK_tbl_rentExpenses_tbl_shares1");

                    b.HasOne("Diarna.Data.Domain.TblUnit", "Unit")
                        .WithMany("TblRentExpenses")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_tbl_rentExpenses_tbl_units")
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Shares");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblRentedUnit", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblUnit", "Unit")
                        .WithMany("TblRentedUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_tbl_RentedUnits_tbl_units");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblReservation", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblReservationDate", "Date")
                        .WithMany("TblReservations")
                        .HasForeignKey("DateId")
                        .HasConstraintName("FK_tbl_reservation_tbl_reservationDate1")
                        .IsRequired();

                    b.HasOne("Diarna.Data.Domain.TblRentUser", "RentUser")
                        .WithMany("TblReservations")
                        .HasForeignKey("RentUserId")
                        .HasConstraintName("FK_tbl_reservation_tbl_RentUsers");

                    b.HasOne("Diarna.Data.Domain.TblUnit", "Unit")
                        .WithMany("TblReservations")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_tbl_reservation_tbl_units1")
                        .IsRequired();

                    b.Navigation("Date");

                    b.Navigation("RentUser");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblShare", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblUserShare", "UserShares")
                        .WithMany("TblShares")
                        .HasForeignKey("UserSharesId")
                        .HasConstraintName("FK_tbl_shares_tbl_userShares1");

                    b.Navigation("UserShares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblSystemUserAuthorization", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblAuthorization", "Auth")
                        .WithMany("TblSystemUserAuthorizations")
                        .HasForeignKey("AuthId")
                        .HasConstraintName("FK_tbl_systemUser_authorization_tbl_authorization")
                        .IsRequired();

                    b.HasOne("Diarna.Data.Domain.TblSystemUser", "SysUser")
                        .WithMany("TblSystemUserAuthorizations")
                        .HasForeignKey("SysUserId")
                        .HasConstraintName("FK_tbl_systemUser_authorization_tbl_systemUsers")
                        .IsRequired();

                    b.Navigation("Auth");

                    b.Navigation("SysUser");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblTenderShare", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblShare", "Shares")
                        .WithMany("TblTenderShares")
                        .HasForeignKey("SharesId")
                        .HasConstraintName("FK_tbl_tender_userShares_tbl_shares1")
                        .IsRequired();

                    b.HasOne("Diarna.Data.Domain.TblTender", "Tender")
                        .WithMany("TblTenderShares")
                        .HasForeignKey("TenderId")
                        .HasConstraintName("FK_tbl_tender_userShares_tbl_tenders1")
                        .IsRequired();

                    b.Navigation("Shares");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUnit", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblBuilding", "Building")
                        .WithMany("TblUnits")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("FK_tbl_units_tbl_building1");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUnitsShare", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblShare", "Shares")
                        .WithMany("TblUnitsShares")
                        .HasForeignKey("SharesId")
                        .HasConstraintName("FK_tbl_userShares_units_tbl_shares1")
                        .IsRequired();

                    b.HasOne("Diarna.Data.Domain.TblUnit", "Unit")
                        .WithMany("TblUnitsShares")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_tbl_userShares_units_tbl_units1")
                        .IsRequired();

                    b.Navigation("Shares");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUserShare", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblAuthorization", "Auth")
                        .WithMany("TblUserShares")
                        .HasForeignKey("AuthId")
                        .HasConstraintName("FK_tbl_userShares_tbl_authorization");

                    b.Navigation("Auth");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblVillage", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblGovernorate", "tblGovernorate")
                        .WithMany("TblVillages")
                        .HasForeignKey("tblGovernorateId");

                    b.Navigation("tblGovernorate");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblVillageImages", b =>
                {
                    b.HasOne("Diarna.Data.Domain.TblVillage", "tblVillage")
                        .WithMany()
                        .HasForeignKey("tblVillageId");

                    b.Navigation("tblVillage");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblAuthorization", b =>
                {
                    b.Navigation("TblSystemUserAuthorizations");

                    b.Navigation("TblUserShares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblBuilding", b =>
                {
                    b.Navigation("TblUnits");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblGovernorate", b =>
                {
                    b.Navigation("TblVillages");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblItem", b =>
                {
                    b.Navigation("TblContractingExpnses");

                    b.Navigation("TblContractingImports");

                    b.Navigation("TblRentExpenses");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblItemType", b =>
                {
                    b.Navigation("TblItems");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblRentUser", b =>
                {
                    b.Navigation("TblReservations");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblReservationDate", b =>
                {
                    b.Navigation("TblReservations");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblShare", b =>
                {
                    b.Navigation("TblRentExpenses");

                    b.Navigation("TblTenderShares");

                    b.Navigation("TblUnitsShares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblSystemUser", b =>
                {
                    b.Navigation("TblSystemUserAuthorizations");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblTender", b =>
                {
                    b.Navigation("TblContractingExpnses");

                    b.Navigation("TblContractingImports");

                    b.Navigation("TblTenderShares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUnit", b =>
                {
                    b.Navigation("TblMonthlyFiltrings");

                    b.Navigation("TblRentedUnits");

                    b.Navigation("TblRentExpenses");

                    b.Navigation("TblReservations");

                    b.Navigation("TblUnitsShares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblUserShare", b =>
                {
                    b.Navigation("TblShares");
                });

            modelBuilder.Entity("Diarna.Data.Domain.TblVillage", b =>
                {
                    b.Navigation("TblBuildings");
                });
#pragma warning restore 612, 618
        }
    }
}
